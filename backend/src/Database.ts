//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { UsersEntity } from './db/Users.entity';
import { CustomersEntity } from './db/Customers.entity';
import { WorkoutsEntity } from './db/Workouts.entity';
import { NutritionEntity } from './db/Nutrition.entity';
import { HealthMetricsEntity } from './db/HealthMetrics.entity';
import { NotificationsEntity } from './db/Notifications.entity';
import { SupportTicketsEntity } from './db/SupportTickets.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      UsersEntity,
      CustomersEntity,
      WorkoutsEntity,
      NutritionEntity,
      HealthMetricsEntity,
      NotificationsEntity,
      SupportTicketsEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Users: [
        {
          name: 'name 1',
          email: 'email 1',
          password: 'password 1',
          role: 'role 1',
          id: 8,
        },
        {
          name: 'name 2',
          email: 'email 2',
          password: 'password 2',
          role: 'role 2',
          id: 56,
        },
        {
          name: 'name 3',
          email: 'email 3',
          password: 'password 3',
          role: 'role 3',
          id: 77,
        },
        {
          name: 'name 4',
          email: 'email 4',
          password: 'password 4',
          role: 'role 4',
          id: 95,
        },
        {
          name: 'name 5',
          email: 'email 5',
          password: 'password 5',
          role: 'role 5',
          id: 32,
        },
      ],
      Customers: [
        {
          name: 'name 1',
          email: 'email 1',
          password: 'password 1',
          age: 1,
          gender: 'gender 1',
          weight: 0.5,
          height: 0.52,
          healthConditions: 'healthConditions 1',
          goals: 'goals 1',
          dietaryPreferences: 'dietaryPreferences 1',
          billingAddress: 'billingAddress 1',
          country: 'country 1',
          phone: 'phone 1',
          id: 23,
        },
        {
          name: 'name 2',
          email: 'email 2',
          password: 'password 2',
          age: 2,
          gender: 'gender 2',
          weight: 0.53,
          height: 0.76,
          healthConditions: 'healthConditions 2',
          goals: 'goals 2',
          dietaryPreferences: 'dietaryPreferences 2',
          billingAddress: 'billingAddress 2',
          country: 'country 2',
          phone: 'phone 2',
          id: 98,
        },
        {
          name: 'name 3',
          email: 'email 3',
          password: 'password 3',
          age: 3,
          gender: 'gender 3',
          weight: 0.79,
          height: 0,
          healthConditions: 'healthConditions 3',
          goals: 'goals 3',
          dietaryPreferences: 'dietaryPreferences 3',
          billingAddress: 'billingAddress 3',
          country: 'country 3',
          phone: 'phone 3',
          id: 64,
        },
        {
          name: 'name 4',
          email: 'email 4',
          password: 'password 4',
          age: 4,
          gender: 'gender 4',
          weight: 0.02,
          height: 0.33,
          healthConditions: 'healthConditions 4',
          goals: 'goals 4',
          dietaryPreferences: 'dietaryPreferences 4',
          billingAddress: 'billingAddress 4',
          country: 'country 4',
          phone: 'phone 4',
          id: 68,
        },
        {
          name: 'name 5',
          email: 'email 5',
          password: 'password 5',
          age: 5,
          gender: 'gender 5',
          weight: 0.8,
          height: 0.9,
          healthConditions: 'healthConditions 5',
          goals: 'goals 5',
          dietaryPreferences: 'dietaryPreferences 5',
          billingAddress: 'billingAddress 5',
          country: 'country 5',
          phone: 'phone 5',
          id: 38,
        },
      ],
      Workouts: [
        {
          description: 'description 1',
          relatedCustomer: 1,
          type: 'type 1',
          duration: 0.14,
          intensity: 'intensity 1',
          caloriesBurned: 0.46,
          date: '2025-01-12T09:04:47.354Z',
          id: 91,
        },
        {
          description: 'description 2',
          relatedCustomer: 2,
          type: 'type 2',
          duration: 0.86,
          intensity: 'intensity 2',
          caloriesBurned: 0.68,
          date: '2024-03-05T15:34:01.913Z',
          id: 97,
        },
        {
          description: 'description 3',
          relatedCustomer: 3,
          type: 'type 3',
          duration: 0.98,
          intensity: 'intensity 3',
          caloriesBurned: 0.83,
          date: '2024-05-20T09:50:26.800Z',
          id: 85,
        },
        {
          description: 'description 4',
          relatedCustomer: 4,
          type: 'type 4',
          duration: 0.61,
          intensity: 'intensity 4',
          caloriesBurned: 0.54,
          date: '2023-10-05T03:16:59.591Z',
          id: 42,
        },
        {
          description: 'description 5',
          relatedCustomer: 5,
          type: 'type 5',
          duration: 0.72,
          intensity: 'intensity 5',
          caloriesBurned: 0.27,
          date: '2023-11-07T01:44:43.621Z',
          id: 91,
        },
      ],
      Nutrition: [
        {
          description: 'description 1',
          relatedCustomer: 1,
          foodItem: 'foodItem 1',
          quantity: 0,
          calories: 0.72,
          macronutrients: 'macronutrients 1',
          date: '2023-08-18T02:41:05.074Z',
          id: 23,
        },
        {
          description: 'description 2',
          relatedCustomer: 2,
          foodItem: 'foodItem 2',
          quantity: 0.51,
          calories: 0.4,
          macronutrients: 'macronutrients 2',
          date: '2024-03-15T11:23:51.537Z',
          id: 65,
        },
        {
          description: 'description 3',
          relatedCustomer: 3,
          foodItem: 'foodItem 3',
          quantity: 0.81,
          calories: 0.3,
          macronutrients: 'macronutrients 3',
          date: '2023-06-01T05:24:54.760Z',
          id: 68,
        },
        {
          description: 'description 4',
          relatedCustomer: 4,
          foodItem: 'foodItem 4',
          quantity: 0.63,
          calories: 0.48,
          macronutrients: 'macronutrients 4',
          date: '2023-09-11T07:13:09.624Z',
          id: 1,
        },
        {
          description: 'description 5',
          relatedCustomer: 5,
          foodItem: 'foodItem 5',
          quantity: 0.3,
          calories: 0.38,
          macronutrients: 'macronutrients 5',
          date: '2023-11-24T19:08:22.400Z',
          id: 68,
        },
      ],
      HealthMetrics: [
        {
          description: 'description 1',
          relatedCustomer: 1,
          type: 'type 1',
          value: 0.08,
          unit: 'unit 1',
          date: '2024-05-13T01:04:49.310Z',
          id: 23,
        },
        {
          description: 'description 2',
          relatedCustomer: 2,
          type: 'type 2',
          value: 0.38,
          unit: 'unit 2',
          date: '2024-01-09T17:01:25.758Z',
          id: 93,
        },
        {
          description: 'description 3',
          relatedCustomer: 3,
          type: 'type 3',
          value: 0.87,
          unit: 'unit 3',
          date: '2023-04-22T02:25:53.638Z',
          id: 16,
        },
        {
          description: 'description 4',
          relatedCustomer: 4,
          type: 'type 4',
          value: 0.57,
          unit: 'unit 4',
          date: '2023-12-19T09:57:52.332Z',
          id: 68,
        },
        {
          description: 'description 5',
          relatedCustomer: 5,
          type: 'type 5',
          value: 0.76,
          unit: 'unit 5',
          date: '2023-09-16T17:40:45.081Z',
          id: 71,
        },
      ],
      Notifications: [
        {
          description: 'description 1',
          relatedCustomer: 1,
          type: 'type 1',
          message: 'message 1',
          dateScheduled: '2024-12-13T03:21:43.585Z',
          status: 'status 1',
          id: 44,
        },
        {
          description: 'description 2',
          relatedCustomer: 2,
          type: 'type 2',
          message: 'message 2',
          dateScheduled: '2024-12-13T08:06:13.436Z',
          status: 'status 2',
          id: 70,
        },
        {
          description: 'description 3',
          relatedCustomer: 3,
          type: 'type 3',
          message: 'message 3',
          dateScheduled: '2024-09-21T10:24:41.676Z',
          status: 'status 3',
          id: 56,
        },
        {
          description: 'description 4',
          relatedCustomer: 4,
          type: 'type 4',
          message: 'message 4',
          dateScheduled: '2025-03-20T16:53:03.618Z',
          status: 'status 4',
          id: 52,
        },
        {
          description: 'description 5',
          relatedCustomer: 5,
          type: 'type 5',
          message: 'message 5',
          dateScheduled: '2024-10-12T00:02:34.431Z',
          status: 'status 5',
          id: 9,
        },
      ],
      SupportTickets: [
        {
          description: 'description 1',
          relatedTicket: 'relatedTicket 1',
          relatedUser: 1,
          relatedCustomer: 1,
          status: 'status 1',
          creationDate: '2024-12-25T14:16:08.897Z',
          resolutionDate: '2024-12-05T10:12:49.107Z',
          id: 83,
        },
        {
          description: 'description 2',
          relatedTicket: 'relatedTicket 2',
          relatedUser: 2,
          relatedCustomer: 2,
          status: 'status 2',
          creationDate: '2025-03-26T00:06:38.127Z',
          resolutionDate: '2023-09-19T09:51:34.173Z',
          id: 27,
        },
        {
          description: 'description 3',
          relatedTicket: 'relatedTicket 3',
          relatedUser: 3,
          relatedCustomer: 3,
          status: 'status 3',
          creationDate: '2024-06-10T11:03:20.128Z',
          resolutionDate: '2024-12-09T14:18:53.216Z',
          id: 72,
        },
        {
          description: 'description 4',
          relatedTicket: 'relatedTicket 4',
          relatedUser: 4,
          relatedCustomer: 4,
          status: 'status 4',
          creationDate: '2023-10-04T03:20:38.573Z',
          resolutionDate: '2023-10-08T23:36:05.377Z',
          id: 59,
        },
        {
          description: 'description 5',
          relatedTicket: 'relatedTicket 5',
          relatedUser: 5,
          relatedCustomer: 5,
          status: 'status 5',
          creationDate: '2023-09-24T13:10:43.108Z',
          resolutionDate: '2023-07-30T09:36:15.445Z',
          id: 6,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('UsersEntity', data.Users);
      await this.SeedResource('CustomersEntity', data.Customers);
      await this.SeedResource('WorkoutsEntity', data.Workouts);
      await this.SeedResource('NutritionEntity', data.Nutrition);
      await this.SeedResource('HealthMetricsEntity', data.HealthMetrics);
      await this.SeedResource('NotificationsEntity', data.Notifications);
      await this.SeedResource('SupportTicketsEntity', data.SupportTickets);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
